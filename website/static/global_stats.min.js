$(window).on("load",function(){var skipCap=5,skipIndex=5,charts={workers:void 0,hashrate:void 0,distWorkers:void 0,distHashrate:void 0},graphData={workers:[],hashrate:[],blocks:[]},handlePoolEntry=function(time,pool){return pool?skipIndex<5?(skipIndex++,{workers:{x:time,y:pool.workerCount},blocks:{x:time,y:pool.blocks.pending}}):(skipIndex=0,{workers:{x:time,y:pool.workerCount},hashrate:{x:time,y:pool.hashrate,original:pool.hashrate,ema:0},blocks:{x:time,y:pool.blocks.pending}}):{}},finalizeGraphDataBuild=function(data){return Object.keys(data.hashrate).forEach(function(pool){applyExponentialMovingAVG(data.hashrate[pool].data)}),Object.keys(data).forEach(function(i){let item=data[i],latest=data.latest[i];if(item&&latest)for(let e in item)if(Object.prototype.hasOwnProperty.call(item,e)){let entry=item[e];if(entry){let last=entry.data[entry.data.length-1];last&&(latest.labels.push(e),latest.data.push(last.y))}}}),data},buildGraphData=function(data){var store={pools:[],workers:{},hashrate:{},blocks:{},latest:{workers:{labels:[],data:[]},hashrate:{labels:[],data:[]}}};for(let i=0;i<data.length;i++){let item=data[i];if(item){let time=1e3*item.time,pools=item.pools;pools&&handlePools(store,time,pools)}}return finalizeGraphDataBuild(store)},handlePools=function(store,time,pools){try{for(p in pools){store.pools.includes(p)||store.pools.push(p);let pool=pools[p],parsed=handlePoolEntry(time,pool);for(e in parsed){let isWorkers="workers"===e,root=store[e];if(root){if(!root[p]){let index=Object.keys(root).length,color=chartColors[index%chartColors.length];root[p]={label:p,pointRadius:isWorkers?0:1,steppedLine:isWorkers,borderColor:color,backgroundColor:convertHex(color,20),data:[]}}root[p].data.push(parsed[e])}}}}catch(e){return console.error(e),!1}finally{return!0}},createLineChart=function(id,datasets,beginAtZero=!0,steps=10,stepValue=5,callback=function(value,index,values){return value}){var ctx=$(`#${id}`);return new Chart(ctx,{type:"line",data:{datasets:datasets},options:{scales:{yAxes:[{gridLines:{color:"rgba(100, 100, 100, 0.1)"},ticks:{beginAtZero:beginAtZero,steps:steps,stepValue:stepValue,callback:callback}}],xAxes:[{type:"time",distribution:"series",gridLines:{display:!1},ticks:{source:"labels"}}]}}})},createPieChart=function(id,data,reverseColors=!1,options={}){let ctx=$(`#${id}`),colors=reverseColors?chartColors.slice(0).reverse():chartColors;return new Chart(ctx,{type:"pie",data:{datasets:[{label:"Colors",backgroundColor:colors,borderColor:colors,data:data.data}],labels:data.labels},options:options})},isNewPoolAdded=function(pools){if(pools)for(p in pools)if(!graphData.pools.includes(p))return!0;return!1},handleData=function(data){try{graphData=buildGraphData(data),charts.workers=createLineChart("worker-chart-global",Object.values(graphData.workers),!0,5,2,(value,index,values)=>{if(0==value)return value;{let floor=Math.floor(value);return floor<=0?"":floor}}),charts.hashrate=createLineChart("hashrate-chart-global",Object.values(graphData.hashrate),!0,10,5,(value,index,values)=>formatHashrate(value)),charts.distWorkers=createPieChart("dist-worker-chart-global",graphData.latest.workers),charts.distHashrate=createPieChart("dist-hash-chart-global",graphData.latest.hashrate,!0,{tooltips:{callbacks:{label:function(tooltipItem,data){var indice=tooltipItem.index;return data.labels[indice]+": "+formatHashrate(data.datasets[0].data[indice])}}}})}catch(e){return console.error(e),!1}finally{return!0}};$.getJSON("/api/pool_stats",function(data){handleData(data)?console.log("Successfully displayed statistic data and charts!"):console.error("Something went wrong while displaying statistics and charts!")}),statsSource.addEventListener("message",function(e){let response=JSON.parse(e.data);if(response){let newPoolAdded=isNewPoolAdded(response.pools),time=1e3*response.time;if(handlePools(graphData,time,response.pools),newPoolAdded)handleData(response)?console.log("Successfully updated statistic data and charts with new data!"):console.error("Something went wrong while updating statistics and charts with new data!");else for(c in charts){let chart=charts[c];chart&&chart.update()}}})});