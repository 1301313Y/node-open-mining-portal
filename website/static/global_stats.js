$(window).on("load",function(){var skipCap=5;var skipIndex=skipCap;var charts={workers:undefined,hashrate:undefined,distWorkers:undefined,distHashrate:undefined};var graphData={workers:[],hashrate:[],blocks:[]};var handlePoolEntry=function(time,pool){if(!pool){return{}}else{if(skipIndex<skipCap){skipIndex++;return{workers:{x:time,y:pool.workerCount},blocks:{x:time,y:pool.blocks.pending}}}
skipIndex=0;return{workers:{x:time,y:pool.workerCount},hashrate:{x:time,y:pool.hashrate,original:pool.hashrate,ema:0},blocks:{x:time,y:pool.blocks.pending}}}};var finalizeGraphDataBuild=function(data){Object.keys(data.hashrate).forEach(function(pool){applyExponentialMovingAVG(data.hashrate[pool].data)});Object.keys(data).forEach(function(i){let item=data[i];let latest=data.latest[i];if(item&&latest){for(let e in item){if(Object.prototype.hasOwnProperty.call(item,e)){let entry=item[e];if(entry){let last=entry.data[entry.data.length-1];if(last){latest.labels.push(e);latest.data.push(last.y)}}}}}});return data};var buildGraphData=function(data){var store={pools:[],workers:{},hashrate:{},blocks:{},latest:{workers:{labels:[],data:[]},hashrate:{labels:[],data:[]}}};for(let i=0;i<data.length;i++){let item=data[i];if(item){let time=item.time*1000;let pools=item.pools;if(pools){handlePools(store,time,pools)}}}
return finalizeGraphDataBuild(store)};var handlePools=function(store,time,pools){try{for(p in pools){if(!store.pools.includes(p)){store.pools.push(p)}
let pool=pools[p];let parsed=handlePoolEntry(time,pool);for(e in parsed){let isWorkers=e==='workers';let root=store[e];if(root){if(!root[p]){let index=Object.keys(root).length;let color=chartColors[index%chartColors.length];root[p]={label:p,pointRadius:isWorkers?0:1,steppedLine:isWorkers,borderColor:color,backgroundColor:convertHex(color,20),data:[]}}
root[p].data.push(parsed[e])}}}}catch(e){console.error(e);return!1}finally{return!0}}
var createLineChart=function(id,datasets,beginAtZero=!0,steps=10,stepValue=5,callback=function(value,index,values){return value}){var ctx=$(`#${id}`);return new Chart(ctx,{type:'line',data:{datasets:datasets},options:{scales:{yAxes:[{gridLines:{color:"rgba(100, 100, 100, 0.1)"},ticks:{beginAtZero:beginAtZero,steps:steps,stepValue:stepValue,callback:callback}}],xAxes:[{type:'time',distribution:'series',gridLines:{display:!1},ticks:{source:'labels'}}]}}})}
var createPieChart=function(id,data,reverseColors=!1,options={}){let ctx=$(`#${id}`);let colors=!reverseColors?chartColors:chartColors.slice(0).reverse();return new Chart(ctx,{type:'pie',data:{datasets:[{label:'Colors',backgroundColor:colors,borderColor:colors,data:data.data}],labels:data.labels},options:options})}
var isNewPoolAdded=function(pools){if(pools){for(p in pools){if(!graphData.pools.includes(p)){return!0}}}
return!1}
var handleData=function(data){try{graphData=buildGraphData(data);charts.workers=createLineChart('worker-chart-global',Object.values(graphData.workers),!0,5,2,(value,index,values)=>{if(value==0){return value}else{let floor=Math.floor(value);return floor<=0?'':floor}});charts.hashrate=createLineChart('hashrate-chart-global',Object.values(graphData.hashrate),!0,10,5,(value,index,values)=>{return formatHashrate(value)});charts.distWorkers=createPieChart('dist-worker-chart-global',graphData.latest.workers);charts.distHashrate=createPieChart('dist-hash-chart-global',graphData.latest.hashrate,!0,{tooltips:{callbacks:{label:function(tooltipItem,data){var indice=tooltipItem.index;return data.labels[indice]+': '+formatHashrate(data.datasets[0].data[indice])+''}}}})}catch(e){console.error(e);return!1}finally{return!0}}
$.getJSON('/api/pool_stats',function(data){if(handleData(data)){console.log('Successfully displayed statistic data and charts!')}else{console.error('Something went wrong while displaying statistics and charts!')}});statsSource.addEventListener('message',function(e){let response=JSON.parse(e.data);if(response){let newPoolAdded=isNewPoolAdded(response.pools);let time=response.time*1000;handlePools(graphData,time,response.pools);if(newPoolAdded){if(handleData(response)){console.log('Successfully updated statistic data and charts with new data!')}else{console.error('Something went wrong while updating statistics and charts with new data!')}}else{for(c in charts){let chart=charts[c];if(chart){chart.update()}}}}})})